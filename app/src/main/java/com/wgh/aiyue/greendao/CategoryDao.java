package com.wgh.aiyue.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.wgh.aiyue.model.Category;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.ArrayList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY".
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Grade = new Property(1, int.class, "grade", false, "GRADE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property SelfKey = new Property(3, String.class, "selfKey", false, "SELF_KEY");
        public final static Property NextNames = new Property(4, String.class, "nextNames", false, "NEXT_NAMES");
        public final static Property ContentUrls = new Property(5, String.class, "contentUrls", false, "CONTENT_URLS");
        public final static Property ContentTitles = new Property(6, String.class, "contentTitles", false, "CONTENT_TITLES");
        public final static Property NextKeys = new Property(7, String.class, "nextKeys", false, "NEXT_KEYS");
    }

    private final ListConverter nextNamesConverter = new ListConverter();
    private final ListConverter contentUrlsConverter = new ListConverter();
    private final ListConverter contentTitlesConverter = new ListConverter();
    private final ListConverter nextKeysConverter = new ListConverter();

    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GRADE\" INTEGER NOT NULL ," + // 1: grade
                "\"NAME\" TEXT," + // 2: name
                "\"SELF_KEY\" TEXT," + // 3: selfKey
                "\"NEXT_NAMES\" TEXT," + // 4: nextNames
                "\"CONTENT_URLS\" TEXT," + // 5: contentUrls
                "\"CONTENT_TITLES\" TEXT," + // 6: contentTitles
                "\"NEXT_KEYS\" TEXT);"); // 7: nextKeys
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGrade());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String selfKey = entity.getSelfKey();
        if (selfKey != null) {
            stmt.bindString(4, selfKey);
        }
 
        ArrayList nextNames = entity.getNextNames();
        if (nextNames != null) {
            stmt.bindString(5, nextNamesConverter.convertToDatabaseValue(nextNames));
        }
 
        ArrayList contentUrls = entity.getContentUrls();
        if (contentUrls != null) {
            stmt.bindString(6, contentUrlsConverter.convertToDatabaseValue(contentUrls));
        }
 
        ArrayList contentTitles = entity.getContentTitles();
        if (contentTitles != null) {
            stmt.bindString(7, contentTitlesConverter.convertToDatabaseValue(contentTitles));
        }
 
        ArrayList nextKeys = entity.getNextKeys();
        if (nextKeys != null) {
            stmt.bindString(8, nextKeysConverter.convertToDatabaseValue(nextKeys));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGrade());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String selfKey = entity.getSelfKey();
        if (selfKey != null) {
            stmt.bindString(4, selfKey);
        }
 
        ArrayList nextNames = entity.getNextNames();
        if (nextNames != null) {
            stmt.bindString(5, nextNamesConverter.convertToDatabaseValue(nextNames));
        }
 
        ArrayList contentUrls = entity.getContentUrls();
        if (contentUrls != null) {
            stmt.bindString(6, contentUrlsConverter.convertToDatabaseValue(contentUrls));
        }
 
        ArrayList contentTitles = entity.getContentTitles();
        if (contentTitles != null) {
            stmt.bindString(7, contentTitlesConverter.convertToDatabaseValue(contentTitles));
        }
 
        ArrayList nextKeys = entity.getNextKeys();
        if (nextKeys != null) {
            stmt.bindString(8, nextKeysConverter.convertToDatabaseValue(nextKeys));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // grade
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // selfKey
            cursor.isNull(offset + 4) ? null : nextNamesConverter.convertToEntityProperty(cursor.getString(offset + 4)), // nextNames
            cursor.isNull(offset + 5) ? null : contentUrlsConverter.convertToEntityProperty(cursor.getString(offset + 5)), // contentUrls
            cursor.isNull(offset + 6) ? null : contentTitlesConverter.convertToEntityProperty(cursor.getString(offset + 6)), // contentTitles
            cursor.isNull(offset + 7) ? null : nextKeysConverter.convertToEntityProperty(cursor.getString(offset + 7)) // nextKeys
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGrade(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSelfKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNextNames(cursor.isNull(offset + 4) ? null : nextNamesConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setContentUrls(cursor.isNull(offset + 5) ? null : contentUrlsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setContentTitles(cursor.isNull(offset + 6) ? null : contentTitlesConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setNextKeys(cursor.isNull(offset + 7) ? null : nextKeysConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Category entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
